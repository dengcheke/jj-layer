define(["exports","esri/geometry/geometryEngine","esri/geometry/projection","esri/geometry/SpatialReference"],(function(t,e,n,r){"use strict";function s(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}function o(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:function(){return t[n]}})}})),e.default=t,Object.freeze(e)}var a=o(e),i=o(n),l=s(r);function c(t){return[t>>0&255,t>>8&255,t>>16&255,t>>24&255]}function f(t){let e,n,r;if(t>=0){if(t<65536)return[0,t];r=65536*Math.floor(t/65536),e=r,n=t-r}else{if(t>-65536)return[0,t];r=65536*Math.floor(-t/65536),e=-r,n=t+r}return[e,n]}function h(t,e,n){return t+(e-t)*n}class u{constructor(t=0,e=0){this.x=t,this.y=e}set(t,e){return this.x=t,this.y=e,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}equals(t){return t.x===this.x&&t.y===this.y}rotateAround(t,e){const n=Math.cos(e),r=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*n-o*r+t.x,this.y=s*r+o*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}}let y=1;const d=new Map;function x(t){const e=++y;return d.set(e,t),e}const p=15/180*Math.PI;t.createRasterFlowLineMesh=function({data:t,setting:e,useCache:n,computeSpeedRange:r}){let s,o;if(n?t.data=d.get(t.data):(t.data=new Float64Array(t.data),s=x(t.data)),r){const{data:e,noDataValue:n}=t;let r=1/0,s=-1/0;for(let t=0;t<e.length;t+=2){const o=Math.hypot(e[t]===n?0:e[t],e[t+1]===n?0:e[t+1]);r=Math.min(r,o),s=Math.max(s,o)}o=[r,s]}const a=function(t,e){const n=[],[r,s,o,a]=t.limitRange;let i=1/t.lineCollisionWidth;const l=Math.round((s-r)*i),c=Math.round((a-o)*i),f=new Uint8Array(l*c),h=[];for(let e=o;e<a;e+=t.lineSpacing)for(let n=r;n<s;n+=t.lineSpacing)h.push({x:n,y:e,sort:Math.random()});h.sort(((t,e)=>t.sort-e.sort));const u=function(t){const[e,n,r,s]=t;return(t,o)=>t>=e&&t<=n&&o>=r&&o<=s}(t.limitRange);for(const{x:r,y:s}of h)if(Math.random()<t.density){const o=y(t,e,r,s,f,l,c,i,t.limitRange,u);o.length>3&&n.push(o)}return n}(e,function(t){const{width:e,height:n,data:r,noDataValue:s}=t;return(t,o)=>{const a=new u(t,o).floor();if(a.x<0||a.x>=e||a.y<0||a.y>=n)return[0,0];t-=a.x,o-=a.y;const i=a.x<e-1?1:0,l=a.y<n-1?1:0,c=a.y*e+a.x,f=a.y*e+(a.x+i),y=(a.y+l)*e+a.x,d=(a.y+l)*e+(a.x+i),[x,p,m,g]=[c,y,f,d].map((t=>{const e=r[2*t];return e===s?0:e})),[w,b,v,M]=[c,y,f,d].map((t=>{const e=r[2*t+1];return e===s?0:e}));return[h(h(x,p,o),h(m,g,o),t),h(h(w,b,o),h(v,M,o),t)]}}(t)),{buffer1:i,buffer2:l,buffer3:c,buffer4:f}=function(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n].length-1;const n=4*e,r=new Float32Array(n),s=new Float32Array(n),o=new Float32Array(n),a=new Float32Array(2*e);let i=0;for(let e=0;e<t.length;e++){const n=t[e],l=n[n.length-1].t,c=Math.random(),f=n.length;for(let t=0,e=f-2;t<=e;t++){const f=4*i,h=f+1,u=f+2,y=f+3,d=0===t?n[0]:n[t-1],x=n[t],p=n[t+1],m=t===e?n[t+1]:n[t+2];r[f]=d.x,r[h]=d.y,r[u]=x.x,r[y]=x.y,s[f]=p.x,s[h]=p.y,s[u]=m.x,s[y]=m.y,o[f]=x.t,o[h]=p.t,o[u]=l,o[y]=c,a[2*i]=x.speed,a[2*i+1]=p.speed,i++}}return{buffer1:r,buffer2:s,buffer3:o,buffer4:a}}(a);return{result:{buffer1:i.buffer,buffer2:l.buffer,buffer3:c.buffer,buffer4:f.buffer,speedRange:o,cacheId:n?null:s},transferList:[i.buffer,l.buffer,c.buffer,f.buffer]};function y(t,e,n,r,s,o,a,i,l,c){const f=[];let h=0;const y=new u(n,r),d=new u,x=new u,p=new u;f.push({x:n,y:r,t:h,speed:p.set(...e(n,r)).length()});for(let n=0;n<t.verticesPerLine&&(!n||c(y.x,y.y));n++){const r=p.set(...e(y.x,y.y)),c=r.length(),u=c*t.velocityScale;if(u<t.minSpeedThreshold)break;r.normalize(),x.copy(r);const m=p.copy(y).addScaledVector(x,t.segmentLength);if(h+=t.segmentLength/(u*t.renderVScale),n&&Math.acos(x.dot(d))>t.maxTurnAngle)break;if(t.mergeLines){const[t,e,n,r]=l,c=Math.round((m.x-t)*i),f=Math.round((m.y-n)*i);if(c<0||c>o-1||f<0||f>a-1)break;if(s[f*o+c]>0)break;s[f*o+c]=1}f.push({x:m.x,y:m.y,t:h,speed:c}),d.copy(x),y.copy(m)}return f}},t.processTINMeshPart=function({data:t,sourceSR:e,targetSR:n,offsetCenter:r,pickIndexOffset:s}){const o=e.wkid===n.wkid;return new Promise((t=>{o?t():i.load().then((()=>t()))})).then((()=>{const[a,l]=r,f=new Float64Array(t),h=f.length/6,u=new Uint8ClampedArray(4*h);for(let t=0;t<h;t++){const e=4*t,n=c(t+1+s);u[e]=n[0],u[e+1]=n[1],u[e+2]=n[2],u[e+3]=n[3]}const y=new Float32Array(f.length);if(o)for(let t=0;t<f.length;t+=2)y[t]=f[t]-a,y[t+1]=f[t+1]-l;else for(let t=0;t<f.length;t+=2){const r=i.project({x:f[t],y:f[t+1],spatialReference:e},n);y[t]=r.x-a,y[t+1]=r.y-l}return{result:{vertexBuffer:y.buffer,pickBuffer:u.buffer},transferList:[y.buffer,u.buffer]}}))},t.removeCache=function(t){d.delete(t)},t.setCache=x,t.tessellateFlowLine=function(t){return i.load().then((()=>{let{sr:e,geometry:n}=JSON.parse(t);e=new l.default(e),n=a.simplify(n),e.equals(n.spatialReference)||(n=i.project(n,e));const r=[],s=function(t){if("polyline"!==t.type.toLowerCase())throw new Error("geometry type is not polyline");return t.paths.map((function(t){if(t.length<2)return console.warn("path's point length < 2, ignored"),null;if(2===t.length){const e=new u(t[1][0]-t[0][0],t[1][1]-t[0][1]),n=e.length();e.normalize();const r=-e.y,s=e.x,o=f(t[0][0]),a=f(t[0][1]),i=f(t[1][0]),l=f(t[1][1]);return{vertexCount:4,vPart1:new Float32Array([o[0],a[0],o[1],a[1],o[0],a[0],o[1],a[1],i[0],l[0],i[1],l[1],i[0],l[0],i[1],l[1]]),vPart2:new Float32Array([r,-1*s,0,0,-r,-1*-s,0,0,r,-1*s,n,0,-r,-1*-s,n,0]),vPart3:new Float32Array([1,0,-1,0,1,1,-1,1]),index:new Uint32Array([0,1,2,1,3,2]),totalDis:n}}const e=[];let n=0,r=4*(t.length-1),s=6*(t.length-1);{const o=new u,a=new u,i=new u,l=new u,c=new u,f=new u,h=new u,y=new u,d=new u,x=new u,p=new u;o.set(t[1][0]-t[0][0],t[1][1]-t[0][1]),n+=o.length(),o.normalize(),h.set(-o.y,o.x),e.push({isCw:!0,common:{x:t[0][0],y:t[0][1],len:0,index:0},p1:{side:1,offset:[h.x,h.y],delta:0},p2:{side:-1,offset:[-h.x,-h.y],delta:0}});for(let u=1,m=t.length;u<m-1;u++){c.set(t[u][0],t[u][1]);const m=n;f.set(t[u+1][0],t[u+1][1]),l.subVectors(f,c),n+=l.length(),l.normalize();const g=o.cross(l)<=0;a.copy(o),i.copy(l),g?(a.set(-a.y,a.x),i.set(-i.y,i.x)):(a.set(a.y,-a.x),i.set(i.y,-i.x)),h.addVectors(a,i).normalize();const w=a.dot(h);if(w<5e-324||Math.abs(w-1)<=11102230246251565e-32)h.set(-o.y,o.x),e.push({isCw:g,sameDir:w>.5,common:{x:c.x,y:c.y,len:m,index:u},p1:{side:1,offset:[h.x,h.y],delta:0},p2:{side:-1,offset:[-h.x,-h.y],delta:0}});else{h.multiplyScalar(1/w),y.copy(h).multiplyScalar(-1),d.copy(y).addScaledVector(a,2),x.copy(y).addScaledVector(i,2);const t=p.subVectors(h,a).length(),n=g?-1:1,o=g?1:-1,l=b(a,i,-t,t,g);r+=2*l.length-1,s+=3*(l.length-1),l.forEach((t=>{const[e,n]=t.vec;t.vec=[y.x+2*e,y.y+2*n]})),e.push({isCw:g,common:{x:c.x,y:c.y,len:m,index:u},c0:{side:n,offset:[y.x,y.y],delta:void 0},c1:{side:o,offset:[d.x,d.y],delta:-t},c2:{side:o,offset:[x.x,x.y],delta:t},sub:l})}o.copy(l)}{const r=t.length-1;c.set(t[r][0],t[r][1]),h.copy(o),h.set(-h.y,h.x),e.push({isCw:!0,common:{x:c.x,y:c.y,len:n,index:r},p1:{side:1,offset:[h.x,h.y],delta:0},p2:{side:-1,offset:[-h.x,-h.y],delta:0}})}}let o=0,a=0,i=null;const l=new Float32Array(4*r),c=new Float32Array(4*r),h=new Float32Array(2*r),y=new Uint32Array(s),d=e.length;for(let t=1;t<d-1;t++){const n=e[t-1],r=e[t],{p1:s,p2:a}=n,{c0:l,c1:c,c2:f,isCw:h,sub:u,p1:y,p2:d}=r;if(u?.length){const t={...r.common,...l,delta:c.delta},e={...r.common,...c};i=o,g(o++,{...n.common,...s}),g(o++,{...n.common,...a}),g(o++,h?e:t),g(o++,h?t:e),w(i,i+1,i+2,i+1,i+3,i+2),i=o;const y=u.length-1,d=h?1:-1;g(o++,{...r.common,delta:u[0].value,offset:u[0].vec,side:d});for(let t=1;t<=y;t++){const e=u[t-1],n=u[t];g(o++,{...r.common,...l,delta:(e.value+n.value)/2}),g(o++,{...r.common,side:d,delta:n.value,offset:n.vec});const s=i+2*t;h?w(s-2,s-1,s):w(s,s-1,s-2)}l.delta=f.delta,r.p1=h?f:l,r.p2=h?l:f}else if(i=o,g(o++,{...n.common,...s}),g(o++,{...n.common,...a}),g(o++,{...r.common,...y}),g(o++,{...r.common,...d}),w(i,i+1,i+2,i+1,i+3,i+2),!r.sameDir){const t=y.offset;y.offset=d.offset,d.offset=t}}const x=e[d-2],m=e[d-1];return i=o,g(o++,{...x.common,...x.p1}),g(o++,{...x.common,...x.p2}),g(o++,{...m.common,...m.p1}),g(o++,{...m.common,...m.p2}),w(i,i+1,i+2,i+1,i+3,i+2),{vertexCount:l.length/4,vPart1:l,vPart2:c,vPart3:h,index:y,totalDis:n};function g(t,e){const n=4*t,r=2*t,s=n+1,o=n+2,a=n+3,[i,u]=f(e.x),[y,d]=f(e.y);l[n]=i,l[s]=y,l[o]=u,l[a]=d,c[n]=e.offset[0],c[s]=-1*e.offset[1],c[o]=e.len,c[a]=e.delta,h[r]=e.side,h[r+1]=e.index}function w(...t){const e=a;for(let n=0;n<t.length;n++)y[e+n]=t[n];a+=t.length}function b(t,e,n,r,s=!0){let o=t.dot(e)/(t.length()*e.length());Math.abs(o)>1&&(o=o>0?1:-1);const a=Math.acos(o)||0;let i=a/p,l=i>>0;if(i-l>=.5&&(l+=1),l=Math.max(l,1),1===l)return[{vec:[t.x,t.y],value:n},{vec:[e.x,e.y],value:r}];const c=(s?-1:1)*a/l,f=(r-n)/l,h=Math.cos(c),u=Math.sin(c),y=[{vec:[t.x,t.y],value:n}];for(let t=1;t<=l;t++){const e=y[t-1],n=e.vec;y.push({vec:[n[0]*h-n[1]*u,n[0]*u+n[1]*h],value:e.value+f})}return y}}))}(n);return s.forEach((({vPart1:t,vPart2:e,vPart3:n,index:s})=>{r.push(t.buffer),r.push(e.buffer),r.push(n.buffer),r.push(s.buffer)})),{result:{mesh:s,extent:n.extent.toJSON()},transferList:r}}))},Object.defineProperty(t,"__esModule",{value:!0})}));
